{"version":3,"sources":["components/data-panel/index.tsx","components/panel/index.tsx","components/request-status/index.tsx","graphql/query-post.ts","components/post-list/index.tsx","components/load-more/index.tsx","graphql/search.ts","hooks/usePosts.ts","app/posts/index.tsx","app/post/index.tsx","components/header/navbar.tsx","components/header/index.tsx","components/footer/index.tsx","components/list-panel/index.tsx","graphql/query-sider.ts","components/sider/index.tsx","components/layout/index.tsx","app/page/index.tsx","app/App.tsx","app/index.tsx","serviceWorker.ts","index.tsx","graphql/query-posts.ts","app/archives/index.tsx"],"names":["DataPanel","children","title","ext","loading","error","onRefresh","icon","Panel","className","RequestStatus","memo","onClick","style","cursor","QUERY_POST","gql","config","github","repository","name","owner","PostItem","issue","showYear","createDate","moment","createdAt","format","to","number","milestone","labels","nodes","length","map","label","key","PostList","issues","LoadMore","hasNextPage","loadMore","merge","prev","next","search","pageInfo","SEARCH","usePosts","query","assignee","variables","after","useQuery","notifyOnNetworkStatusChange","data","fetchMore","refetch","posts","endCursor","useCallback","updateQuery","fetchMoreResult","Posts","match","params","path","Post","id","commentRef","node","Gitalk","gitalk","render","post","dangerouslySetInnerHTML","__html","bodyHTML","ref","withRouter","location","pathname","menus","pages","isActive","menu","test","classnames","active","Header","subtitle","Footer","href","target","rel","marginLeft","ListPanel","renderItem","itemKey","direction","item","i","QUERY_SIDER","Sider","categories","milestones","tags","recentPosts","Layout","Page","issueNumber","allowComments","issueHTML","App","exact","component","require","default","page","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","cache","InMemoryCache","client","ApolloClient","uri","request","operation","setContext","headers","authorization","token","ApolloApp","Helmet","content","keywords","description","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","QUERY_POSTS","Archives","archives","useMemo","reduce","Date","getFullYear","toString","findIndex","push","archive"],"mappings":"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","file":"static/js/main.a99f5d00.chunk.js","sourcesContent":["import React from 'react'\nimport Panel, { PanelProps } from '../panel'\nimport RequestStatus, { RequestStatusProps } from '../request-status'\n\nexport type DataPanelProps = PanelProps & RequestStatusProps\n\nconst DataPanel: React.FC<DataPanelProps> = ({\n  children,\n  title,\n  ext,\n  loading,\n  error,\n  onRefresh,\n  icon,\n}) => {\n  return (\n    <Panel title={title} ext={ext} icon={icon}>\n      <RequestStatus loading={loading} error={error} onRefresh={onRefresh}>\n        {children}\n      </RequestStatus>\n    </Panel>\n  )\n}\n\nexport default DataPanel\n","import React from 'react'\nimport './index.scss'\n\nexport interface PanelProps {\n  title?: React.ReactNode\n  ext?: React.ReactNode\n  icon?: string\n}\n\nconst Panel: React.FC<PanelProps> = ({ title, ext, children, icon }) => (\n  <div className=\"m-panel\">\n    {(title || ext) && (\n      <div className=\"m-panel-header\">\n        <div className=\"m-panel-title\">\n          {icon && <i className={icon} />}\n          {title}\n        </div>\n        {ext && <div>{ext}</div>}\n      </div>\n    )}\n    <div className=\"m-panel-body\">{children}</div>\n  </div>\n)\n\nexport default Panel\n","import React, { memo } from 'react'\nimport { ApolloError } from 'apollo-client/errors/ApolloError'\n\nexport interface RequestStatusProps {\n  loading?: boolean\n  error?: ApolloError | undefined\n  onRefresh?: () => void\n}\n\nconst RequestStatus: React.FC<RequestStatusProps> = memo(\n  ({ loading = false, error = null, onRefresh, children }) => {\n    if (loading) return <span>loading...</span>\n    if (error)\n      return (\n        <span>\n          fetch error.\n          {onRefresh && (\n            <i onClick={onRefresh} style={{ cursor: 'pointer' }}>\n              refresh\n            </i>\n          )}\n        </span>\n      )\n    return <>{children}</>\n  }\n)\n\nexport default RequestStatus\n","import { gql } from 'apollo-boost'\nimport { IQueryPostResult } from '../interfaces'\nimport config from '../configs/blog.json'\n\nexport type QueryPostVariables = {\n  number: number\n}\n\nexport type QueryPostResult = IQueryPostResult\n\nconst QUERY_POST = gql`\n    query($number: Int!) {\n        repository(name: \"${config.github.repository.name}\", owner: \"${config.github.repository.owner}\") {\n            issue(number: $number) {\n                title\n                bodyHTML\n                createdAt\n                updatedAt\n                milestone {\n                  number\n                  title\n                }\n                labels(first: 10) {\n                  nodes {\n                    name\n                  }\n                }\n            }\n        }\n    }\n`\n\nexport default QUERY_POST\n","import React from 'react'\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\nimport { IIssue } from '../../interfaces'\nimport './index.scss'\n\ninterface PostListProps {\n  issues: IIssue[]\n  showYear?: boolean\n}\n\ninterface PostItemProps {\n  issue: IIssue\n  showYear: boolean\n}\n\nconst PostItem: React.FC<PostItemProps> = ({ issue, showYear }) => {\n  const createDate = moment(issue.createdAt)\n  return (\n    <div className=\"m-post-item\">\n      <div className=\"m-post-item-header\">\n        {/* {issue.createdAt} */}\n        <div className=\"m-post-item-day\">{createDate.format('MM-DD')}</div>\n        {showYear && (\n          <div className=\"m-post-item-year\">{createDate.format('YYYY')}</div>\n        )}\n      </div>\n      <div className=\"m-post-item-body\">\n        <div className=\"m-post-item-title\">\n          <Link to={`/posts/${issue.number}`}>{issue.title}</Link>\n        </div>\n        <div className=\"m-post-item-profile\">\n          {issue.milestone && (\n            <>\n              <span>Category: </span>\n              <b>\n                <Link to={`/categories/${issue.milestone.number}`}>\n                  {issue.milestone.title}\n                </Link>\n              </b>\n            </>\n          )}\n          {issue.labels.nodes.length !== 0 && (\n            <>\n              <span>Tags: </span>\n              {issue.labels.nodes.map(label => (\n                <i key={label.name}>\n                  <Link to={`/tags/${label.name}`}>{label.name}</Link>\n                </i>\n              ))}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst PostList: React.FC<PostListProps> = ({ issues, showYear = true }) => {\n  return (\n    <ul className=\"m-post-list\">\n      {issues.map(issue => (\n        <li key={issue.number}>\n          <PostItem issue={issue} showYear={showYear}></PostItem>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default PostList\n","import React from 'react'\nimport RequestStatus, { RequestStatusProps } from '../request-status'\nimport './index.scss'\n\ninterface Props extends RequestStatusProps {\n  loadMore: () => void\n  hasNextPage: boolean\n}\n\nconst LoadMore: React.FC<Props> = ({\n  loading,\n  error,\n  hasNextPage,\n  loadMore,\n  onRefresh,\n}) => (\n  <div className=\"m-list-end\">\n    <RequestStatus loading={loading} error={error} onRefresh={onRefresh}>\n      {hasNextPage && (\n        <div className=\"m-load-more\" onClick={loadMore}>\n          <div>加载更多</div>\n          <div>﹀</div>\n        </div>\n      )}\n    </RequestStatus>\n  </div>\n)\n\nexport default LoadMore\n","import { gql } from 'apollo-boost'\nimport { ISearchResult } from '../interfaces'\n\nexport type SearchResult = ISearchResult\n\nexport type SearchVariables = {\n  query: string\n  after: string | null\n}\n\nexport function merge(prev: SearchResult, next: SearchResult): SearchResult {\n  return {\n    search: {\n      ...prev.search,\n      pageInfo: next.search.pageInfo,\n      nodes: [...prev.search.nodes, ...next.search.nodes],\n    },\n  }\n}\n\nconst SEARCH = gql`\n  query($query: String!, $after: String) {\n    search(query: $query, type: ISSUE, first: 10, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      nodes {\n        ... on Issue {\n          number\n          title\n          createdAt\n          milestone {\n            number\n            title\n          }\n          labels(first: 10) {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n// \"useHook repo:facebook/react assignee:662\"\nexport default SEARCH\n","import { useCallback } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport config from '../configs/blog.json'\n\nimport SEARCH, {\n  merge,\n  SearchVariables as Variables,\n  SearchResult as Result,\n} from '../graphql/search'\n\ntype Params = {\n  milestone?: string\n  label?: string\n}\n\nconst usePosts = ({ milestone, label }: Params = {}) => {\n  let query = `repo:${config.github.repository.owner}/${config.github.repository.name} assignee:${config.github.repository.assignee}`\n  if (milestone) query += ` milestone:${milestone}`\n  if (label) query += ` label:${label}`\n\n  const variables: Variables = { query, after: null }\n\n  const { data, loading, error, fetchMore, refetch } = useQuery<\n    Result,\n    Variables\n  >(SEARCH, { variables, notifyOnNetworkStatusChange: true })\n\n  const posts = data?.search.nodes ?? []\n  const { endCursor, hasNextPage } = data?.search.pageInfo ?? {\n    endCursor: null,\n    hasNextPage: false,\n  }\n\n  const loadMore = useCallback(() => {\n    fetchMore({\n      variables: { ...variables, after: endCursor },\n      updateQuery: (prev, { fetchMoreResult: next }) =>\n        next ? merge(prev, next) : prev,\n    })\n  }, [fetchMore, variables, endCursor])\n\n  return {\n    posts,\n    hasNextPage,\n    loading,\n    error,\n    loadMore,\n    refetch,\n  }\n}\n\nexport default usePosts\n","import React, { memo } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport Panel from '../../components/panel'\nimport PostList from '../../components/post-list'\nimport LoadMore from '../../components/load-more'\nimport usePosts from '../../hooks/usePosts'\n\ntype PostsProps = RouteComponentProps<{\n  title: string\n}>\n\nconst Posts: React.FC<PostsProps> = memo(({ match }) => {\n  const params = { milestone: '', label: '' }\n  const title = match.params.title\n  if (match.path === '/categories/:title') params.milestone = title\n  else if (match.path === '/tags/:title') params.label = title\n\n  const { posts, loading, error, loadMore, refetch, hasNextPage } = usePosts(\n    params\n  )\n\n  return (\n    <Panel>\n      {title && <h2>{title}</h2>}\n      <PostList issues={posts}></PostList>\n      <LoadMore\n        onRefresh={refetch}\n        loading={loading}\n        error={error}\n        hasNextPage={hasNextPage}\n        loadMore={loadMore}></LoadMore>\n    </Panel>\n  )\n})\n\nexport default Posts\n","import React, { memo, useCallback } from 'react'\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\nimport { RouteComponentProps } from 'react-router-dom'\nimport Gitalk from 'gitalk'\nimport QUERY_POST, {\n  QueryPostResult as Result,\n  QueryPostVariables as Variables,\n} from '../../graphql/query-post'\nimport DataPanel from '../../components/data-panel'\nimport config from '../../configs/blog.json'\nimport 'gitalk/dist/gitalk.css'\nimport './index.scss'\n\ntype Params = { id: string }\n\nconst Post: React.FC<RouteComponentProps<Params>> = memo(({ match }) => {\n  const number = ~~match.params.id\n\n  const { loading, data, error, refetch } = useQuery<Result, Variables>(\n    QUERY_POST,\n    { variables: { number } }\n  )\n\n  const commentRef = useCallback(\n    node => {\n      if (node !== null) {\n        const gitalk = new Gitalk({ ...config.gitalk, number })\n        gitalk.render(node)\n      }\n    },\n    [number]\n  )\n\n  const post = data?.repository.issue\n\n  return (\n    <DataPanel error={error} loading={loading} onRefresh={refetch}>\n      {post && (\n        <>\n          <div className=\"m-post-header\">\n            <h2 className=\"m-post-title\">{post.title}</h2>\n            <div className=\"m-post-profile\">\n              <span className=\"m-post-profile-item\">\n                {moment(post.createdAt).format('YYYY-MM-DD')}\n              </span>\n              <span className=\"m-post-profile-title\">Category:</span>\n              <Link\n                className=\"m-post-profile-item\"\n                to={`/categories/${post.milestone.number}`}>\n                {post.milestone.title}\n              </Link>\n            </div>\n            <div className=\"m-post-profile\">\n              <span className=\"m-post-profile-title\">Tags:</span>\n              {post.labels.nodes.map(label => (\n                <Link\n                  key={label.name}\n                  className=\"m-post-profile-item\"\n                  to={`/tags/${label.name}`}>\n                  {label.name}\n                </Link>\n              ))}\n            </div>\n          </div>\n          <div\n            className=\"markdown-body\"\n            dangerouslySetInnerHTML={{\n              __html: post.bodyHTML,\n            }}></div>\n          <div ref={commentRef} className=\"m-post-comments\"></div>\n        </>\n      )}\n    </DataPanel>\n  )\n})\n\nexport default Post\n","import React from 'react'\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom'\nimport classnames from 'classnames'\nimport config from '../../configs/blog.json'\n\nconst Navbar: React.FC<RouteComponentProps> = ({ location }) => {\n  const path = location.pathname\n\n  const menus = [\n    { title: 'Home', icon: 'home', path: '/' },\n    {\n      title: 'Archives',\n      icon: 'archive',\n      path: '/archives',\n      match: /^(\\/archives|\\/categories\\/|\\/tags\\/|\\/posts\\/)/,\n    },\n    ...(config.pages || []),\n  ]\n\n  const isActive = (menu: any) =>\n    path === menu.path || (menu.match && menu.match.test(path))\n  return (\n    <ul className=\"m-navbar\">\n      {menus.map(menu => (\n        <li key={menu.path}>\n          <Link\n            to={menu.path}\n            className={classnames({ active: isActive(menu) })}>\n            {menu.icon && <i className={`fas fa-${menu.icon}`}></i>}\n            {menu.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default withRouter(Navbar)\n","import React from 'react'\nimport Navbar from './navbar'\nimport config from '../../configs/blog.json'\nimport './index.scss'\n\nconst Header: React.FC = () => {\n  return (\n    <section className=\"m-header m-container\">\n      <div>\n        <h1>{config.title}</h1>\n        <p>{config.subtitle}</p>\n      </div>\n      <Navbar></Navbar>\n    </section>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport './index.scss'\n\nconst Footer: React.FC = () => (\n  <section className=\"m-container m-footer\">\n    Copyright © 2019 Lost Scarecrow.\n    <a\n      href=\"http://www.beian.miit.gov.cn/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      style={{ marginLeft: 16 }}>\n      渝ICP备17011776号\n    </a>\n  </section>\n)\n\nexport default Footer\n","import React from 'react'\nimport DataPanel, { DataPanelProps } from '../data-panel'\nimport './index.scss'\n\nexport interface ListPanelProps<T> extends DataPanelProps {\n  direction?: 'row' | 'column'\n  data: T[]\n  renderItem: (item: T, index: number) => React.ReactNode\n  itemKey: (item: T) => string\n}\n\nfunction ListPanel<T>({\n  icon,\n  title,\n  ext,\n  data,\n  renderItem,\n  itemKey,\n  error,\n  loading,\n  direction = 'column',\n}: ListPanelProps<T>) {\n  return (\n    <DataPanel\n      title={title}\n      ext={ext}\n      error={error}\n      loading={loading}\n      icon={icon}>\n      <ul className={`m-panel-list m-panel-list-${direction}`}>\n        {data.map((item, i) => (\n          <li key={itemKey(item)}>{renderItem(item, i)}</li>\n        ))}\n      </ul>\n    </DataPanel>\n  )\n}\n\nexport default ListPanel\n","import { gql } from 'apollo-boost'\nimport { IQuerySiderResult } from '../interfaces'\nimport config from '../configs/blog.json'\n\nexport type QuerySiderResult = IQuerySiderResult\n\nconst QUERY_SIDER = gql`\n  {\n    repository(\n      name: \"${config.github.repository.name}\",\n      owner: \"${config.github.repository.owner}\"\n    ) {\n      milestones(last: 100) {\n        nodes {\n          number\n          title\n        }\n      }\n      labels(last: 100) {\n        nodes {\n          name\n        }\n      }\n      issues(\n        first: 5,\n        orderBy: { field: CREATED_AT, direction: DESC },\n        filterBy: { assignee: \"${config.github.repository.assignee}\" }\n      ) {\n        nodes {\n          number\n          title\n        }\n      }\n    }\n  }\n`\n\nexport default QUERY_SIDER\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Link } from 'react-router-dom'\nimport ListPanel from '../list-panel'\nimport RequestStatus from '../request-status'\n\nimport { IMilestone, ILabel, IIssue } from '../../interfaces'\nimport QUERY_SIDER from '../../graphql/query-sider'\nimport './index.scss'\n\nconst Sider: React.FC = () => {\n  const { loading, error, data, refetch } = useQuery(QUERY_SIDER)\n  const categories: IMilestone[] = data ? data.repository.milestones.nodes : []\n  const tags: ILabel[] = data ? data.repository.labels.nodes : []\n  const recentPosts: IIssue[] = data ? data.repository.issues.nodes : []\n\n  return (\n    <div className=\"m-sider\">\n      <RequestStatus loading={loading} error={error} onRefresh={refetch}>\n        <ListPanel\n          icon=\"far fa-folder\"\n          title=\"Categories\"\n          data={categories}\n          itemKey={item => item.title}\n          renderItem={item => (\n            <Link to={`/categories/${item.title}`} title={item.title}>\n              {item.title}\n            </Link>\n          )}\n        />\n        <ListPanel\n          icon=\"far fa-star\"\n          title=\"Tags\"\n          direction=\"row\"\n          data={tags}\n          itemKey={item => item.name}\n          renderItem={item => (\n            <Link to={`/tags/${item.name}`} title={item.name}>\n              {item.name}\n            </Link>\n          )}\n        />\n        <ListPanel\n          icon=\"far fa-file\"\n          title=\"Recent\"\n          data={recentPosts}\n          itemKey={item => item.number}\n          renderItem={item => (\n            <Link to={`/posts/${item.number}`} title={item.title}>\n              {item.title}\n            </Link>\n          )}\n        />\n      </RequestStatus>\n    </div>\n  )\n}\n\nexport default Sider\n","import React from 'react'\n\nimport Header from '../header'\nimport Footer from '../footer'\nimport Sider from '../sider'\nimport './index.scss'\n\nconst Layout: React.FC = ({ children }) => {\n  return (\n    <>\n      <Header></Header>\n      <section className=\"m-container m-body\">\n        <main>{children}</main>\n        <Sider />\n      </section>\n      <Footer></Footer>\n    </>\n  )\n}\n\nexport default Layout\n","import React, { useCallback } from 'react'\nimport Gitalk from 'gitalk'\nimport { useQuery } from '@apollo/react-hooks'\nimport QUERY_POST from 'src/graphql/query-post'\nimport DataPanel from '../../components/data-panel'\nimport config from '../../configs/blog.json'\nimport 'gitalk/dist/gitalk.css'\nimport './index.scss'\n\ninterface PageProps {\n  issueNumber: number\n  title: string\n  allowComments: boolean\n}\n\nconst Page: React.FC<PageProps> = ({ issueNumber, title, allowComments }) => {\n  const { loading, data, error, refetch } = useQuery(QUERY_POST, {\n    variables: { number: issueNumber },\n  })\n\n  const issueHTML = data ? data.repository.issue.bodyHTML : ''\n\n  const commentRef = useCallback(\n    node => {\n      if (node !== null) {\n        const gitalk = new Gitalk({ ...config.gitalk, number: issueNumber })\n        gitalk.render(node)\n      }\n    },\n    [issueNumber]\n  )\n\n  return (\n    <DataPanel error={error} loading={loading} onRefresh={refetch}>\n      <h2 className=\"m-page-title\">{title}</h2>\n      <div\n        className=\"markdown-body\"\n        dangerouslySetInnerHTML={{ __html: issueHTML }}></div>\n\n      {allowComments && (\n        <div ref={commentRef} className=\"m-page-comments\"></div>\n      )}\n    </DataPanel>\n  )\n}\n\nexport default Page\n","import React from 'react'\nimport {\n  Switch,\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport Layout from '../components/layout'\nimport Page from './page'\nimport config from '../configs/blog.json'\n\ninterface Props {}\n\nconst App: React.FC<Props> = () => {\n  return (\n    <Router>\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\" component={require('./posts').default} />\n          <Route\n            exact\n            path=\"/archives\"\n            component={require('./archives').default}\n          />\n          <Route\n            exact\n            path=\"/tags/:title\"\n            component={require('./posts').default}\n          />\n          <Route\n            exact\n            path=\"/categories/:title\"\n            component={require('./posts').default}\n          />\n          <Route\n            exact\n            path=\"/posts/:id\"\n            component={require('./post').default}\n          />\n          {config.pages.map(page => (\n            <Route exact key={page.path} path={page.path}>\n              <Page\n                title={page.title}\n                issueNumber={page.issueNumber}\n                allowComments={page.allowComments}></Page>\n            </Route>\n          ))}\n          <Redirect to=\"/\" />\n        </Switch>\n      </Layout>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport ApolloClient from 'apollo-boost'\nimport {\n  IntrospectionFragmentMatcher,\n  InMemoryCache,\n} from 'apollo-cache-inmemory'\nimport App from './App'\nimport config from '../configs/blog.json'\nimport introspectionQueryResultData from '../configs/fragment-types.json'\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData,\n})\nconst cache = new InMemoryCache({ fragmentMatcher })\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  cache,\n  request: operation => {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${config.github.token}`,\n      },\n    })\n  },\n})\n\nconst ApolloApp: React.FC = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Helmet>\n        <title>\n          {config.title} - {config.subtitle}\n        </title>\n        <meta name=\"Keywords\" content={config.keywords} />\n        <meta name=\"Description\" content={config.description} />\n      </Helmet>\n      <App />\n    </ApolloProvider>\n  )\n}\n\nexport default ApolloApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\nimport 'github-markdown-css'\nimport './assets/styles/normalize.css'\nimport './assets/styles/reset-markdown.css'\nimport './index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { gql } from 'apollo-boost'\nimport { IQueryPostsResult } from '../interfaces'\nimport config from '../configs/blog.json'\n\nexport type QueryPostsVariables = {\n  after: string | null\n  labels: [string] | null\n}\n\nexport type QueryPostsResult = IQueryPostsResult\n\nexport function merge(\n  prev: QueryPostsResult,\n  next: QueryPostsResult\n): QueryPostsResult {\n  return {\n    repository: {\n      ...prev.repository,\n      issues: {\n        ...prev.repository.issues,\n        pageInfo: next.repository.issues.pageInfo,\n        nodes: [\n          ...prev.repository.issues.nodes,\n          ...next.repository.issues.nodes,\n        ],\n      },\n    },\n  }\n}\n\nconst QUERY_POSTS = gql`\n  query($after: String, $labels: [String!]) {\n    repository(\n      name: \"${config.github.repository.name}\",\n      owner: \"${config.github.repository.owner}\"\n    ) {\n      issues(\n        first: 10\n        after: $after\n        labels: $labels\n        orderBy: { field: CREATED_AT, direction: DESC },\n        filterBy: { assignee: \"${config.github.repository.assignee}\" }\n      ) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        nodes {\n          number\n          title\n          createdAt\n          milestone {\n            number\n            title\n          }\n          labels(first: 10) {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default QUERY_POSTS\n","import React, { memo, useMemo } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { IIssue } from '../../interfaces'\nimport Panel from '../../components/panel'\nimport LoadMore from '../../components/load-more'\nimport PostList from '../../components/post-list'\nimport QUERY_POSTS, {\n  merge,\n  QueryPostsResult as Result,\n  QueryPostsVariables as Variables,\n} from '../../graphql/query-posts'\n\ntype Archive = {\n  title: string\n  posts: IIssue[]\n}\n\nconst Archives: React.FC = memo(() => {\n  let variables: Variables = { after: null, labels: null }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery<\n    Result,\n    Variables\n  >(QUERY_POSTS, { variables, notifyOnNetworkStatusChange: true })\n\n  const archives = useMemo(() => {\n    if (!data) return []\n    return data.repository.issues.nodes.reduce<Archive[]>((prev, post) => {\n      const title = new Date(post.createdAt).getFullYear().toString()\n      const i = prev.findIndex(item => item.title === title)\n      if (i > -1) prev[i].posts.push(post)\n      else prev.push({ title, posts: [post] })\n      return prev\n    }, [])\n  }, [data])\n\n  const pageInfo = data?.repository.issues.pageInfo ?? {\n    endCursor: null,\n    hasNextPage: false,\n  }\n\n  const loadMore = () => {\n    fetchMore({\n      variables: { ...variables, after: pageInfo.endCursor },\n      updateQuery: (prev, { fetchMoreResult: next }) =>\n        next ? merge(prev, next) : prev,\n    })\n  }\n\n  return (\n    <Panel>\n      {archives.map(archive => (\n        <div key={archive.title}>\n          <h2>{archive.title}</h2>\n          <PostList issues={archive.posts} showYear={false}></PostList>\n        </div>\n      ))}\n      <LoadMore\n        onRefresh={refetch}\n        loading={loading}\n        error={error}\n        hasNextPage={pageInfo.hasNextPage}\n        loadMore={loadMore}></LoadMore>\n    </Panel>\n  )\n})\n\nexport default Archives\n"],"sourceRoot":""}