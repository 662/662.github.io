{"version":3,"sources":["components/panel/index.tsx","graphql/query-posts.ts","components/post-list/index.tsx","components/load-more/index.tsx","components/data-panel/index.tsx","components/request-status/index.tsx","graphql/query-post.ts","app/home/index.tsx","app/archives/index.tsx","app/tags/index.tsx","app/post/index.tsx","components/header/index.tsx","components/footer/index.tsx","components/list-panel/index.tsx","graphql/query-sider.ts","components/sider/index.tsx","components/layout/index.tsx","app/page/index.tsx","app/App.tsx","app/index.tsx","serviceWorker.ts","index.tsx","graphql/quey-category-posts.ts","app/categories/index.tsx"],"names":["Panel","title","ext","children","icon","className","merge","prev","next","repository","issues","pageInfo","nodes","QUERY_POSTS","gql","config","github","name","owner","assignee","PostItem","issue","showYear","createDate","moment","createdAt","format","to","number","milestone","labels","length","map","label","key","PostList","LoadMore","loading","error","hasNextPage","loadMore","onRefresh","onClick","DataPanel","RequestStatus","memo","style","cursor","QUERY_POST","Home","variables","after","useQuery","notifyOnNetworkStatusChange","data","fetchMore","posts","endCursor","updateQuery","fetchMoreResult","Archives","refetch","archives","useMemo","reduce","post","Date","getFullYear","toString","i","findIndex","item","push","archive","Tags","match","params","Post","id","commentRef","useCallback","node","Gitalk","clientID","clientSecret","repo","admin","distractionFreeMode","render","dangerouslySetInnerHTML","__html","bodyHTML","ref","withRouter","path","location","pathname","menus","pages","isActive","menu","test","subtitle","classnames","active","Footer","ListPanel","renderItem","itemKey","direction","QUERY_SIDER","Sider","categories","milestones","tags","recentPosts","Layout","Page","issueNumber","allowComments","issueHTML","App","exact","component","require","default","page","library","add","faHome","faArchive","faComments","faFolder","faFile","faStar","faExternalLinkAlt","faAddressCard","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","cache","InMemoryCache","client","ApolloClient","uri","request","operation","setContext","headers","authorization","token","ApolloApp","Helmet","content","keywords","description","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","QUERY_CATEGORY_POSTS","Categories"],"mappings":"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","file":"static/js/main.f731220c.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport './index.scss'\n\nexport interface PanelProps {\n  title?: React.ReactNode\n  ext?: React.ReactNode\n  icon?: IconProp\n}\n\nconst Panel: React.FC<PanelProps> = ({ title, ext, children, icon }) => (\n  <div className=\"m-panel\">\n    {(title || ext) && (\n      <div className=\"m-panel-header\">\n        <div className=\"m-panel-title\">\n          {icon && <FontAwesomeIcon icon={icon} />}\n          {title}\n        </div>\n        {ext && <div>{ext}</div>}\n      </div>\n    )}\n    <div className=\"m-panel-body\">{children}</div>\n  </div>\n)\n\nexport default Panel\n","import { gql } from 'apollo-boost'\nimport { IQueryPostsResult } from '../interfaces'\nimport config from '../configs/blog.json'\n\nexport type QueryPostsVariables = {\n  after: string | null\n  labels: [string] | null\n}\n\nexport type QueryPostsResult = IQueryPostsResult\n\nexport function merge(\n  prev: QueryPostsResult,\n  next: QueryPostsResult\n): QueryPostsResult {\n  return {\n    repository: {\n      ...prev.repository,\n      issues: {\n        ...prev.repository.issues,\n        pageInfo: next.repository.issues.pageInfo,\n        nodes: [\n          ...prev.repository.issues.nodes,\n          ...next.repository.issues.nodes,\n        ],\n      },\n    },\n  }\n}\n\nconst QUERY_POSTS = gql`\n  query($after: String, $labels: [String!]) {\n    repository(\n      name: \"${config.github.repository.name}\",\n      owner: \"${config.github.repository.owner}\"\n    ) {\n      issues(\n        first: 10\n        after: $after\n        labels: $labels\n        orderBy: { field: CREATED_AT, direction: DESC },\n        filterBy: { assignee: \"${config.github.repository.assignee}\" }\n      ) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        nodes {\n          number\n          title\n          createdAt\n          milestone {\n            number\n            title\n          }\n          labels(first: 10) {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default QUERY_POSTS\n","import React from 'react'\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\nimport { IIssue } from '../../interfaces'\nimport './index.scss'\n\ninterface PostListProps {\n  issues: IIssue[]\n  showYear?: boolean\n}\n\ninterface PostItemProps {\n  issue: IIssue\n  showYear: boolean\n}\n\nconst PostItem: React.FC<PostItemProps> = ({ issue, showYear }) => {\n  const createDate = moment(issue.createdAt)\n  return (\n    <div className=\"m-post-item\">\n      <div className=\"m-post-item-header\">\n        {/* {issue.createdAt} */}\n        <div className=\"m-post-item-day\">{createDate.format('MM-DD')}</div>\n        {showYear && (\n          <div className=\"m-post-item-year\">{createDate.format('YYYY')}</div>\n        )}\n      </div>\n      <div className=\"m-post-item-body\">\n        <div className=\"m-post-item-title\">\n          <Link to={`/posts/${issue.number}`}>{issue.title}</Link>\n        </div>\n        <div className=\"m-post-item-profile\">\n          {issue.milestone && (\n            <>\n              <span>Category: </span>\n              <b>\n                <Link to={`/categories/${issue.milestone.number}`}>\n                  {issue.milestone.title}\n                </Link>\n              </b>\n            </>\n          )}\n          {issue.labels.nodes.length !== 0 && (\n            <>\n              <span>Tags: </span>\n              {issue.labels.nodes.map(label => (\n                <i key={label.name}>\n                  <Link to={`/tags/${label.name}`}>{label.name}</Link>\n                </i>\n              ))}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst PostList: React.FC<PostListProps> = ({ issues, showYear = true }) => {\n  return (\n    <ul className=\"m-post-list\">\n      {issues.map(issue => (\n        <li key={issue.number}>\n          <PostItem issue={issue} showYear={showYear}></PostItem>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default PostList\n","import React from 'react'\nimport RequestStatus, { RequestStatusProps } from '../request-status'\nimport './index.scss'\n\ninterface Props extends RequestStatusProps {\n  loadMore: () => void\n  hasNextPage: boolean\n}\n\nconst LoadMore: React.FC<Props> = ({\n  loading,\n  error,\n  hasNextPage,\n  loadMore,\n  onRefresh,\n}) => (\n  <div className=\"m-list-end\">\n    <RequestStatus loading={loading} error={error} onRefresh={onRefresh}>\n      {hasNextPage && (\n        <div className=\"m-load-more\" onClick={loadMore}>\n          <div>加载更多</div>\n          <div>﹀</div>\n        </div>\n      )}\n    </RequestStatus>\n  </div>\n)\n\nexport default LoadMore\n","import React from 'react'\nimport Panel, { PanelProps } from '../panel'\nimport RequestStatus, { RequestStatusProps } from '../request-status'\n\nexport type DataPanelProps = PanelProps & RequestStatusProps\n\nconst DataPanel: React.FC<DataPanelProps> = ({\n  children,\n  title,\n  ext,\n  loading,\n  error,\n  onRefresh,\n}) => {\n  return (\n    <Panel title={title} ext={ext}>\n      <RequestStatus loading={loading} error={error} onRefresh={onRefresh}>\n        {children}\n      </RequestStatus>\n    </Panel>\n  )\n}\n\nexport default DataPanel\n","import React, { memo } from 'react'\nimport { ApolloError } from 'apollo-client/errors/ApolloError'\n\nexport interface RequestStatusProps {\n  loading?: boolean\n  error?: ApolloError | undefined\n  onRefresh?: () => void\n}\n\nconst RequestStatus: React.FC<RequestStatusProps> = memo(\n  ({ loading = false, error = null, onRefresh, children }) => {\n    if (loading) return <span>loading...</span>\n    if (error)\n      return (\n        <span>\n          fetch error.\n          {onRefresh && (\n            <i onClick={onRefresh} style={{ cursor: 'pointer' }}>\n              refresh\n            </i>\n          )}\n        </span>\n      )\n    return <>{children}</>\n  }\n)\n\nexport default RequestStatus\n","import { gql } from 'apollo-boost'\nimport { IQueryPostResult } from '../interfaces'\nimport config from '../configs/blog.json'\n\nexport type QueryPostVariables = {\n  number: number\n}\n\nexport type QueryPostResult = IQueryPostResult\n\nconst QUERY_POST = gql`\n    query($number: Int!) {\n        repository(name: \"${config.github.repository.name}\", owner: \"${config.github.repository.owner}\") {\n            issue(number: $number) {\n                title\n                bodyHTML\n                createdAt\n                updatedAt\n                milestone {\n                  number\n                  title\n                }\n                labels(first: 10) {\n                  nodes {\n                    name\n                  }\n                }\n            }\n        }\n    }\n`\n\nexport default QUERY_POST\n","import React, { memo } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Panel from '../../components/panel'\nimport PostList from '../../components/post-list'\nimport LoadMore from '../../components/load-more'\n\nimport QUERY_POSTS, {\n  merge,\n  QueryPostsVariables as Variables,\n  QueryPostsResult as Result,\n} from '../../graphql/query-posts'\n\nconst Home: React.FC = memo(() => {\n  let variables: Variables = { after: null, labels: null }\n\n  const { data, loading, error, fetchMore } = useQuery<Result, Variables>(\n    QUERY_POSTS,\n    { variables, notifyOnNetworkStatusChange: true }\n  )\n\n  const posts = data?.repository.issues.nodes ?? []\n  const pageInfo = data?.repository.issues.pageInfo ?? {\n    endCursor: null,\n    hasNextPage: false,\n  }\n\n  const loadMore = () => {\n    fetchMore({\n      variables: { ...variables, after: pageInfo.endCursor },\n      updateQuery: (prev, { fetchMoreResult: next }) =>\n        next ? merge(prev, next) : prev,\n    })\n  }\n\n  return (\n    <Panel>\n      <PostList issues={posts}></PostList>\n      <LoadMore\n        loading={loading}\n        error={error}\n        hasNextPage={pageInfo.hasNextPage}\n        loadMore={loadMore}></LoadMore>\n    </Panel>\n  )\n})\n\nexport default Home\n","import React, { memo, useMemo } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { IIssue } from '../../interfaces'\nimport Panel from '../../components/panel'\nimport LoadMore from '../../components/load-more'\nimport PostList from '../../components/post-list'\nimport QUERY_POSTS, {\n  merge,\n  QueryPostsResult as Result,\n  QueryPostsVariables as Variables,\n} from '../../graphql/query-posts'\n\ntype Archive = {\n  title: string\n  posts: IIssue[]\n}\n\nconst Archives: React.FC = memo(() => {\n  let variables: Variables = { after: null, labels: null }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery<\n    Result,\n    Variables\n  >(QUERY_POSTS, { variables, notifyOnNetworkStatusChange: true })\n\n  const archives = useMemo(() => {\n    if (!data) return []\n    return data.repository.issues.nodes.reduce<Archive[]>((prev, post) => {\n      const title = new Date(post.createdAt).getFullYear().toString()\n      const i = prev.findIndex(item => item.title === title)\n      if (i > -1) prev[i].posts.push(post)\n      else prev.push({ title, posts: [post] })\n      return prev\n    }, [])\n  }, [data])\n\n  const pageInfo = data?.repository.issues.pageInfo ?? {\n    endCursor: null,\n    hasNextPage: false,\n  }\n\n  const loadMore = () => {\n    fetchMore({\n      variables: { ...variables, after: pageInfo.endCursor },\n      updateQuery: (prev, { fetchMoreResult: next }) =>\n        next ? merge(prev, next) : prev,\n    })\n  }\n\n  return (\n    <Panel>\n      {archives.map(archive => (\n        <div key={archive.title}>\n          <h2>{archive.title}</h2>\n          <PostList issues={archive.posts} showYear={false}></PostList>\n        </div>\n      ))}\n      <LoadMore\n        onRefresh={refetch}\n        loading={loading}\n        error={error}\n        hasNextPage={pageInfo.hasNextPage}\n        loadMore={loadMore}></LoadMore>\n    </Panel>\n  )\n})\n\nexport default Archives\n","import React, { memo } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Panel from '../../components/panel'\nimport PostList from '../../components/post-list'\nimport LoadMore from '../../components/load-more'\n\nimport QUERY_POSTS, {\n  merge,\n  QueryPostsVariables as Variables,\n  QueryPostsResult as Result,\n} from '../../graphql/query-posts'\n\ntype PostsParams = { name: string }\n\nconst Tags: React.FC<RouteComponentProps<PostsParams>> = memo(({ match }) => {\n  let variables: Variables = { labels: [match.params.name], after: null }\n\n  const { data, loading, error, fetchMore } = useQuery<Result, Variables>(\n    QUERY_POSTS,\n    { variables, notifyOnNetworkStatusChange: true }\n  )\n\n  const posts = data?.repository.issues.nodes ?? []\n  const pageInfo = data?.repository.issues.pageInfo ?? {\n    endCursor: null,\n    hasNextPage: false,\n  }\n\n  const loadMore = () => {\n    fetchMore({\n      variables: { ...variables, after: pageInfo.endCursor },\n      updateQuery: (prev, { fetchMoreResult: next }) =>\n        next ? merge(prev, next) : prev,\n    })\n  }\n\n  return (\n    <Panel>\n      <PostList issues={posts}></PostList>\n      <LoadMore\n        loading={loading}\n        error={error}\n        hasNextPage={pageInfo.hasNextPage}\n        loadMore={loadMore}></LoadMore>\n    </Panel>\n  )\n})\n\nexport default Tags\n","import React, { memo, useCallback } from 'react'\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\nimport { RouteComponentProps } from 'react-router-dom'\nimport Gitalk from 'gitalk'\nimport QUERY_POST, {\n  QueryPostResult as Result,\n  QueryPostVariables as Variables,\n} from '../../graphql/query-post'\nimport DataPanel from '../../components/data-panel'\nimport 'gitalk/dist/gitalk.css'\nimport './index.scss'\n\ntype Params = { id: string }\n\nconst Post: React.FC<RouteComponentProps<Params>> = memo(({ match }) => {\n  const number = ~~match.params.id\n\n  const { loading, data, error, refetch } = useQuery<Result, Variables>(\n    QUERY_POST,\n    { variables: { number } }\n  )\n\n  const commentRef = useCallback(\n    node => {\n      if (node !== null) {\n        const gitalk = new Gitalk({\n          clientID: 'a9ea8ec21008341ab6f8',\n          clientSecret: '6656888d4258b947370b8b27b7650baa4e97fca2',\n          repo: 'blog',\n          owner: '662',\n          admin: ['662'],\n          number,\n          distractionFreeMode: false,\n        })\n        gitalk.render(node)\n      }\n    },\n    [number]\n  )\n\n  const post = data?.repository.issue\n\n  return (\n    <DataPanel error={error} loading={loading} onRefresh={refetch}>\n      {post && (\n        <>\n          <div className=\"m-post-header\">\n            <h2 className=\"m-post-title\">{post.title}</h2>\n            <div className=\"m-post-profile\">\n              <span className=\"m-post-profile-item\">\n                {moment(post.createdAt).format('YYYY-MM-DD')}\n              </span>\n              <span className=\"m-post-profile-title\">Category:</span>\n              <Link\n                className=\"m-post-profile-item\"\n                to={`/categories/${post.milestone.number}`}>\n                {post.milestone.title}\n              </Link>\n            </div>\n            <div className=\"m-post-profile\">\n              <span className=\"m-post-profile-title\">Tags:</span>\n              {post.labels.nodes.map(label => (\n                <Link\n                  key={label.name}\n                  className=\"m-post-profile-item\"\n                  to={`/tags/${label.name}`}>\n                  {label.name}\n                </Link>\n              ))}\n            </div>\n          </div>\n          <div\n            className=\"markdown-body\"\n            dangerouslySetInnerHTML={{\n              __html: post.bodyHTML,\n            }}></div>\n          <div ref={commentRef} className=\"m-post-comments\"></div>\n        </>\n      )}\n    </DataPanel>\n  )\n})\n\nexport default Post\n","import React from 'react'\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport classnames from 'classnames'\nimport config from '../../configs/blog.json'\nimport './index.scss'\n\nconst Header: React.FC<RouteComponentProps> = ({ location }) => {\n  const path = location.pathname\n\n  const menus = [\n    { title: 'Home', icon: 'home', path: '/' },\n    {\n      title: 'Archives',\n      icon: 'archive',\n      path: '/archives',\n      match: /^(\\/archives|\\/categories\\/|\\/tags\\/)/,\n    },\n    ...(config.pages || []),\n  ]\n\n  const isActive = (menu: any) =>\n    path === menu.path || (menu.match && menu.match.test(path))\n\n  return (\n    <section className=\"m-header m-container\">\n      <div>\n        <h1>{config.title}</h1>\n        <p>{config.subtitle}</p>\n      </div>\n      <ul className=\"m-navbar\">\n        {menus.map(menu => (\n          <li key={menu.path}>\n            <Link\n              to={menu.path}\n              className={classnames({ active: isActive(menu) })}>\n              {menu.icon && <FontAwesomeIcon icon={menu.icon as IconProp} />}\n              {menu.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport './index.scss'\n\nconst Footer: React.FC = () => (\n  <section className=\"m-container m-footer\">Copyright © 2019 662.</section>\n)\n\nexport default Footer\n","import React from 'react'\nimport DataPanel, { DataPanelProps } from '../data-panel'\nimport './index.scss'\n\nexport interface ListPanelProps<T> extends DataPanelProps {\n  direction?: 'row' | 'column'\n  data: T[]\n  renderItem: (item: T, index: number) => React.ReactNode\n  itemKey: (item: T) => string\n}\n\nfunction ListPanel<T>({\n  title,\n  ext,\n  data,\n  renderItem,\n  itemKey,\n  error,\n  loading,\n  direction = 'column',\n}: ListPanelProps<T>) {\n  return (\n    <DataPanel title={title} ext={ext} error={error} loading={loading}>\n      <ul className={`m-panel-list m-panel-list-${direction}`}>\n        {data.map((item, i) => (\n          <li key={itemKey(item)}>{renderItem(item, i)}</li>\n        ))}\n      </ul>\n    </DataPanel>\n  )\n}\n\nexport default ListPanel\n","import { gql } from 'apollo-boost'\nimport { IQuerySiderResult } from '../interfaces'\nimport config from '../configs/blog.json'\n\nexport type QuerySiderResult = IQuerySiderResult\n\nconst QUERY_SIDER = gql`\n  {\n    repository(\n      name: \"${config.github.repository.name}\",\n      owner: \"${config.github.repository.owner}\"\n    ) {\n      milestones(last: 100) {\n        nodes {\n          number\n          title\n        }\n      }\n      labels(last: 100) {\n        nodes {\n          name\n        }\n      }\n      issues(\n        first: 5,\n        orderBy: { field: CREATED_AT, direction: DESC },\n        filterBy: { assignee: \"${config.github.repository.assignee}\" }\n      ) {\n        nodes {\n          number\n          title\n        }\n      }\n    }\n  }\n`\n\nexport default QUERY_SIDER\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Link } from 'react-router-dom'\nimport ListPanel from '../list-panel'\nimport RequestStatus from '../request-status'\n\nimport { IMilestone, ILabel, IIssue } from '../../interfaces'\nimport QUERY_SIDER from '../../graphql/query-sider'\nimport './index.scss'\n\nconst Sider: React.FC = () => {\n  const { loading, error, data } = useQuery(QUERY_SIDER)\n  const categories: IMilestone[] = data ? data.repository.milestones.nodes : []\n  const tags: ILabel[] = data ? data.repository.labels.nodes : []\n  const recentPosts: IIssue[] = data ? data.repository.issues.nodes : []\n\n  return (\n    <div className=\"m-sider\">\n      <RequestStatus loading={loading} error={error}>\n        <ListPanel\n          title={\n            <>\n              <FontAwesomeIcon icon={['far', 'folder']} />\n              Categories\n            </>\n          }\n          data={categories}\n          itemKey={item => item.number}\n          renderItem={item => (\n            <Link to={`/categories/${item.number}`} title={item.title}>\n              {item.title}\n            </Link>\n          )}\n        />\n        <ListPanel\n          title={\n            <>\n              <FontAwesomeIcon icon={['far', 'star']} />\n              Tags\n            </>\n          }\n          direction=\"row\"\n          data={tags}\n          itemKey={item => item.name}\n          renderItem={item => (\n            <Link to={`/tags/${item.name}`} title={item.name}>\n              {item.name}\n            </Link>\n          )}\n        />\n        <ListPanel\n          title={\n            <>\n              <FontAwesomeIcon icon={['far', 'file']} />\n              Recent\n            </>\n          }\n          data={recentPosts}\n          itemKey={item => item.number}\n          renderItem={item => (\n            <Link to={`/posts/${item.number}`} title={item.title}>\n              {item.title}\n            </Link>\n          )}\n        />\n      </RequestStatus>\n    </div>\n  )\n}\n\nexport default Sider\n","import React from 'react'\n\nimport Header from '../header'\nimport Footer from '../footer'\nimport Sider from '../sider'\nimport './index.scss'\n\nconst Layout: React.FC = ({ children }) => {\n  return (\n    <>\n      <Header></Header>\n      <section className=\"m-container m-body\">\n        <main>{children}</main>\n        <Sider />\n      </section>\n      <Footer></Footer>\n    </>\n  )\n}\n\nexport default Layout\n","import React, { useCallback } from 'react'\nimport Gitalk from 'gitalk'\nimport { useQuery } from '@apollo/react-hooks'\nimport QUERY_POST from '../../graphql/query-post'\nimport DataPanel from '../../components/data-panel'\nimport 'gitalk/dist/gitalk.css'\nimport './index.scss'\n\ninterface PageProps {\n  issueNumber: number\n  title: string\n  allowComments: boolean\n}\n\nconst Page: React.FC<PageProps> = ({ issueNumber, title, allowComments }) => {\n  const { loading, data, error, refetch } = useQuery(QUERY_POST, {\n    variables: { number: issueNumber },\n  })\n\n  const issueHTML = data ? data.repository.issue.bodyHTML : ''\n\n  const commentRef = useCallback(\n    node => {\n      if (node !== null) {\n        const gitalk = new Gitalk({\n          clientID: 'a9ea8ec21008341ab6f8',\n          clientSecret: '6656888d4258b947370b8b27b7650baa4e97fca2',\n          repo: 'blog',\n          owner: '662',\n          admin: ['662'],\n          number: issueNumber,\n          distractionFreeMode: false,\n        })\n        gitalk.render(node)\n      }\n    },\n    [issueNumber]\n  )\n\n  return (\n    <>\n      <DataPanel error={error} loading={loading} onRefresh={refetch}>\n        <h2 className=\"m-page-title\">{title}</h2>\n        <div\n          className=\"markdown-body\"\n          dangerouslySetInnerHTML={{ __html: issueHTML }}></div>\n      </DataPanel>\n\n      {allowComments && (\n        <div ref={commentRef} className=\"m-page-comments\"></div>\n      )}\n    </>\n  )\n}\n\nexport default Page\n","import React from 'react'\nimport {\n  Switch,\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport Layout from '../components/layout'\nimport Page from './page'\nimport config from '../configs/blog.json'\n\ninterface Props {}\n\nconst App: React.FC<Props> = () => {\n  return (\n    <Router>\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\" component={require('./home').default} />\n          <Route\n            exact\n            path=\"/archives\"\n            component={require('./archives').default}\n          />\n          <Route\n            exact\n            path=\"/tags/:name\"\n            component={require('./tags').default}\n          />\n          <Route\n            exact\n            path=\"/categories/:number\"\n            component={require('./categories').default}\n          />\n          <Route\n            exact\n            path=\"/posts/:id\"\n            component={require('./post').default}\n          />\n          {config.pages.map(page => (\n            <Route exact key={page.path} path={page.path}>\n              <Page\n                title={page.title}\n                issueNumber={page.issueNumber}\n                allowComments={page.allowComments}></Page>\n            </Route>\n          ))}\n          <Redirect to=\"/\" />\n        </Switch>\n      </Layout>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport ApolloClient from 'apollo-boost'\nimport {\n  IntrospectionFragmentMatcher,\n  InMemoryCache,\n} from 'apollo-cache-inmemory'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faHome,\n  faArchive,\n  faComments,\n  faExternalLinkAlt,\n  faAddressCard,\n} from '@fortawesome/free-solid-svg-icons'\nimport { faFolder, faFile, faStar } from '@fortawesome/free-regular-svg-icons'\nimport App from './App'\nimport config from '../configs/blog.json'\nimport introspectionQueryResultData from '../configs/fragment-types.json'\n\nlibrary.add(\n  faHome,\n  faArchive,\n  faComments,\n  faFolder,\n  faFile,\n  faStar,\n  faExternalLinkAlt,\n  faAddressCard\n)\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData,\n})\nconst cache = new InMemoryCache({ fragmentMatcher })\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  cache,\n  request: operation => {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${config.github.token}`,\n      },\n    })\n  },\n})\n\nconst ApolloApp: React.FC = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Helmet>\n        <title>\n          {config.title} - {config.subtitle}\n        </title>\n        <meta name=\"Keywords\" content={config.keywords} />\n        <meta name=\"Description\" content={config.description} />\n      </Helmet>\n      <App />\n    </ApolloProvider>\n  )\n}\n\nexport default ApolloApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\nimport 'github-markdown-css'\nimport './assets/styles/normalize.css'\nimport './assets/styles/reset-markdown.css'\nimport './index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { gql } from 'apollo-boost'\nimport { IQueryCategoryPostsResult } from '../interfaces'\nimport config from '../configs/blog.json'\n\nexport type QueryCategoryPostsVariables = {\n  after: string | null\n  number: number\n}\n\nexport type QueryCategoryPostsResult = IQueryCategoryPostsResult\n\nexport function merge(\n  prev: QueryCategoryPostsResult,\n  next: QueryCategoryPostsResult\n): QueryCategoryPostsResult {\n  return {\n    repository: {\n      ...prev.repository,\n      milestone: {\n        ...prev.repository.milestone,\n        issues: {\n          ...prev.repository.milestone.issues,\n          pageInfo: next.repository.milestone.issues.pageInfo,\n          nodes: [\n            ...prev.repository.milestone.issues.nodes,\n            ...next.repository.milestone.issues.nodes,\n          ],\n        },\n      },\n    },\n  }\n}\n\nconst QUERY_CATEGORY_POSTS = gql`\n  query($after: String, $number: Int!) {\n    repository(name: \"${config.github.repository.name}\", owner: \"${config.github.repository.owner}\") {\n      milestone(number: $number) {\n        issues(\n          first: 10\n          after: $after\n          orderBy: { field: CREATED_AT, direction: DESC },\n          filterBy: { assignee: \"${config.github.repository.assignee}\" }\n        ) {\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n          nodes {\n            number\n            title\n            createdAt\n            milestone {\n              number\n              title\n            }\n            labels(first: 10) {\n              nodes {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default QUERY_CATEGORY_POSTS\n","import React, { memo } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Panel from '../../components/panel'\nimport PostList from '../../components/post-list'\nimport LoadMore from '../../components/load-more'\n\nimport QUERY_CATEGORY_POSTS, {\n  merge,\n  QueryCategoryPostsVariables as Variables,\n  QueryCategoryPostsResult as Result,\n} from '../../graphql/quey-category-posts'\n\ntype PostsParams = { number: string }\ntype CategoriesProps = RouteComponentProps<PostsParams>\n\nconst Categories: React.FC<CategoriesProps> = memo(({ match }) => {\n  let variables: Variables = { number: ~~match.params.number, after: null }\n\n  const { data, loading, error, fetchMore } = useQuery<Result, Variables>(\n    QUERY_CATEGORY_POSTS,\n    { variables, notifyOnNetworkStatusChange: true }\n  )\n\n  const posts = data?.repository.milestone.issues.nodes ?? []\n  const pageInfo = data?.repository.milestone.issues.pageInfo ?? {\n    endCursor: null,\n    hasNextPage: false,\n  }\n\n  const loadMore = () => {\n    fetchMore({\n      variables: { ...variables, after: pageInfo.endCursor },\n      updateQuery: (prev, { fetchMoreResult: next }) =>\n        next ? merge(prev, next) : prev,\n    })\n  }\n\n  return (\n    <Panel>\n      <PostList issues={posts}></PostList>\n      <LoadMore\n        loading={loading}\n        error={error}\n        hasNextPage={pageInfo.hasNextPage}\n        loadMore={loadMore}></LoadMore>\n    </Panel>\n  )\n})\n\nexport default Categories\n"],"sourceRoot":""}